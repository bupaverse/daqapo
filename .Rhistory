warning.filtercondition <<- TRUE
}
)
if(warning.filtercondition) {
warning("The condition '", filter_condition, "'  is invalid. No filtering performed on the dataset.")
}
n_cases <- activity_log %>% distinct(case_id) %>% nrow()
n_cases <- NULL
n_cases <- activity_log %>% distinct(case_id) %>% nrow()
library(tidyverse)
library(daqapo)
library(tidyverse)
data("hospital")
read_activity_log(
hospital, "patient_visit_nr", "activity", "originator", "start_ts",
"complete_ts", c("triagecode", "specialization"), "dd/mm/yyyy hh:mm:ss"
) -> hospital
activity_log <- hospital
activity_order <- c("Registration", "Triage", "Clinical exam", "Treatment", "Treatment evaluation")
timestamp = "both"
details = TRUE
filter_condition = NULL
# Apply filter condition when specified
tryCatch({
if(!is.null(filter_condition)) {
activity_log <- activity_log %>% filter_(filter_condition)
}
}, error = function(e) {
warning.filtercondition <<- TRUE
}
)
if(warning.filtercondition) {
warning("The condition '", filter_condition, "'  is invalid. No filtering performed on the dataset.")
}
n_cases <- activity_log %>% distinct(case_id) %>% nrow()
# Filter activities included in activity_order
activity_log <- activity_log %>% filter(activity %in% activity_order)
View(activity_log)
# Add number to ordered activities (used for ordering when multiple activities have the same timestamp for a particular case)
activity_order <- as.data.frame(activity_order)
activity_order$nr <- seq(1, nrow(activity_order))
View(activity_order)
colnames(activity_order)[1] <- "activity"
activity_log <- merge(activity_log,activity_order, by  = "activity")
# Detect time overlap between consecutive activities in case both timestamps are used
if(timestamp == "both" & details == TRUE){
# Sort the activity log
activity_log <- activity_log %>% arrange(case_id, start,complete, nr)
# Determine whether activities are overlapping
#activity_log$start <- as.character(activity_log$start)
#activity_log$complete <- as.character(activity_log$complete)
#activity_log$prior_start <- c(NA, activity_log$start[-nrow(activity_log)])
#activity_log$prior_complete <- c(NA, activity_log$complete[-nrow(activity_log)])
#activity_log$prior_case <- c(NA, activity_log$case_id[-nrow(activity_log)])
#activity_log$prior_activity <- c(NA, activity_log$activity[-nrow(activity_log)])
#activity_log$start <- ymd_hms(activity_log$start)
#activity_log$complete <- ymd_hms(activity_log$complete)
#activity_log$prior_start <- ymd_hms(activity_log$prior_start)
#activity_log$prior_complete <- ymd_hms(activity_log$prior_complete)
activity_log <- activity_log %>%
mutate(
prior_start = lag(start),
prior_complete = lag(complete),
prior_case = lag(case_id),
prior_activity = lag(activity)
)
activity_log$time_overlap <- activity_log$case_id == activity_log$prior_case & activity_log$prior_complete > activity_log$start
activity_log$time_overlap[1] <- FALSE
activity_log$overlapping <- NA
index <- activity_log$time_overlap == TRUE
activity_log$overlapping[index] <- paste(activity_log$prior_activity[index], "and", activity_log$activity[index])
remove(index)
time_overlaps <- activity_log %>% filter(!is.na(overlapping)) %>% group_by(overlapping) %>% summarize(n = n()) %>% arrange(desc(n))
}
load("G:/My Drive/Shared files folders/DAQAPO/R Implementation/data/hospital.RData")
library(daqapo)
activity_log <- read_activity_log(hospital, patient_visit_nr, activity, originator, start_ts, complete_ts, c(triagecode, specialization))
activity_log <- read_activity_log("hospital", "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts", c("triagecode", "specialization"))
activity_log <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts", c("triagecode", "specialization"))
activity_log <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts", c("triagecode", "specialization"),timestamp_format = "dd-mm-yyyy")
activity_log <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts", c("triagecode", "specialization"),timestamp_format = "dd-mm-yyyy hh:mm:ss")
activity_order <- c("Registration", "Triage", "Treatment")
activity_log_backup <- activity_log
# Filter activities included in activity_order
activity_log <- activity_log %>% filter(activity %in% activity_order)
library(dplyr)
# Filter activities included in activity_order
activity_log <- activity_log %>% filter(activity %in% activity_order)
# Add number to ordered activities (used for ordering when multiple activities have the same timestamp for a particular case)
activity_order <- as.data.frame(activity_order)
activity_order$nr <- seq(1, nrow(activity_order))
colnames(activity_order)[1] <- "activity"
activity_log <- merge(activity_log,activity_order, by  = "activity")
# Sort the activity log
activity_log <- activity_log %>% arrange(case_id, start,complete, nr)
activity_log <- activity_log %>%
mutate(
prior_start = lag(start),
prior_complete = lag(complete),
prior_case = lag(case_id),
prior_activity = lag(activity)
)
activity_log$time_overlap <- activity_log$case_id == activity_log$prior_case & activity_log$prior_complete > activity_log$start
activity_log$time_overlap[1] <- FALSE
activity_log$overlapping <- NA
View(activity_log)
index <- activity_log$time_overlap == TRUE
activity_log$overlapping[index] <- paste(activity_log$prior_activity[index], "and", activity_log$activity[index])
remove(index)
View(activity_log)
activity_order(activity_log_backup, c("Registration", "Triage", "Treatment"))
detach("package:daqapo", unload = TRUE)
library(daqapo)
activity_order(activity_log_backup, c("Registration", "Triage", "Treatment"))
View(activity_log_backup)
activity_order(activity_log_backup, c("Registration", "Triage", "Clinical exam", "Treatment", "Treatment evaluation"))
activity_order <- c("Registration", "Triage", "Clinical exam", "Treatment", "Treatment evaluation")
activity_log <- activity_log_backup
# Filter activities included in activity_order
activity_log <- activity_log %>% filter(activity %in% activity_order)
# Add number to ordered activities (used for ordering when multiple activities have the same timestamp for a particular case)
activity_order <- as.data.frame(activity_order)
activity_order$nr <- seq(1, nrow(activity_order))
colnames(activity_order)[1] <- "activity"
activity_log <- merge(activity_log,activity_order, by  = "activity")
# Sort the activity log
activity_log <- activity_log %>% arrange(case_id, start,complete, nr)
activity_log <- activity_log %>%
mutate(
prior_start = lag(start),
prior_complete = lag(complete),
prior_case = lag(case_id),
prior_activity = lag(activity)
)
activity_log$time_overlap <- activity_log$case_id == activity_log$prior_case & activity_log$prior_complete > activity_log$start
activity_log$time_overlap[1] <- FALSE
activity_log$overlapping <- NA
View(activity_log)
index <- activity_log$time_overlap == TRUE
activity_log$overlapping[index] <- paste(activity_log$prior_activity[index], "and", activity_log$activity[index])
index <- is.na(activity_log$time_overlap)
index
activity_log$time_overlap
index <- is.na(activity_log$time_overlap)
activity_log$time_overlap[index] <- FALSE
remove(index)
activity_log$time_overlap
library(daqapo)
activity_order(activity_log_backup, c("Registration", "Triage", "Clinical exam", "Treatment", "Treatment evaluation"))
?dplyr
library(daqapo)
View(hospital)
filter_condition <- "triagecode >= 3"
hospital %>% filter_(filter_condition)
hospital %>% filter_(!!filter_condition)
hospital %>% filter(!!filter_condition)
hospital %>% filter(!! filter_condition)
?filter
hospital %>% dplyr::filter(!! filter_condition)
quo_filter_condition <- quo(filter_condition)
hospital %>% dplyr::filter(!! quo_filter_condition)
hospital %>% filter(!! quo_filter_condition)
?enquo
quo_filter_condition <- lang::enquo(filter_condition)
quo_filter_condition <- rlang::enquo(filter_condition)
hospital %>% filter(!! quo_filter_condition)
quo_filter_condition <- rlang::parse_expr((filter_condition)
quo_filter_condition <- rlang::parse_expr(filter_condition)
hospital %>% filter(!! quo_filter_condition)
hospital %>% filter(triagecode >= 3)
hospital %>% filter(!! rlang::parse_expr(filter_condition))
library(daqapo)
citation("bupar")
citation("bupaR")
library(daqapo)
data("hospital")
hospital <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts",
c("triagecode", "specialization"), "dd/mm/yyyy hh:mm:ss")
View(hospital)
library(dplyr)
?filter
hospital %>% filter("case_id == 510")
hospital %>% filter(quo("case_id == 510"))
hospital %>% filter(quo("case_id == 510") %>% eval_tidy())
hospital %>% filter(quo("case_id == 510") %>% rlang::eval_tidy())
hospital %>% filter("case_id == 510" %>% rlang::eval_tidy())
hospital %>% filter(!! quo("case_id == 510"))
hospital %>% filter(!! rlang::parse_expr("case_id == 510"))
library(daqapo)
hospital %>% activity_frequency(c("Registration", 1))
library(daqapo)
hospital %>% select(case_id)
hospital %>% select("case_id")
hospital %>% select("case_id, activity")
hospital %>% select("case_id", "activity")
hospital %>% select("case_id", "activity")
hospital %>% select("case_id", activity)
hospital %>% distinct("case_id")
hospital %>% distinct(case_id)
library(daqapo)
hospital %>% case_id_sequence(filter_condition = "activity == 'Registration'")
library(daqapo)
hospital %>% count_(c("case_id", "activity"))
hospital %>% count(c("case_id", "activity"))
hospital %>% count("case_id", "activity")
library(daqapo)
library(dplyr)
data("hospital")
hospital_loaded <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts",
c("triagecode", "specialization"), "dd/mm/yyyy hh:mm:ss")
hospital <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts",
c("triagecode", "specialization"), "dd/mm/yyyy hh:mm:ss")
rm(hospital_loaded)
hospital %>% count(c("case_id", "activity"))
hospital %>% count(c(!! rlang::parse_expr("case_id"), "activity"))
hospital %>% count(!! rlang:parse_expr(c("case_id", "activity"))
)
rlang::parse_expr(c("case_id", "activity"))
hospital %>% count(!! rlang:parse_expr("c('case_id', 'activity')"))
hospital %>% missing_values(filter_condition = "case_id >= 520")
library(daqapo)
data("hospital_events")
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
hospital_events <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
library(daqapo)
data("hospital_events")
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
data("hospital_events")
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
hospital_events <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
as.name("hospital")
as.name("hospital") %>% View
library(daqapo)
data("hospital_events")
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
hospital_events <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
data("hospital_events")
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
hospital_events <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss")
hospital_events <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
data("hospital_events")
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
hospital_events <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
hospital %>% select("case_id")
hospital %>% arrange("case_id")
hospital %>% arrange(!! rlang::parse_expr("case_id"))
cid <- "case_id"
hospital %>% arrange(!! rlang::parse_expr(cid))
hospital %>% arrange(!! rlang::parse_expr(cid), !! rlang::parse_expr("activity"))
data("hospital_events")
library(daqapo)
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
hospital_events <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss")
hospital_events <- restructure_to_activity_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
timestamp_format = "dd/mm/yyyy hh:mm:ss")
library(daqapo)
hospital_events <- restructure_to_activity_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
timestamp_format = "dd/mm/yyyy hh:mm:ss")
library(daqapo)
hospital_events <- restructure_to_activity_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
timestamp_format = "dd/mm/yyyy hh:mm:ss")
hospital %>% select("-case_id")
hospital %>% select(-"case_id")
library(daqapo)
library(daqapo)
data("hospital_events")
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
hospital_events <- restructure_to_activity_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
timestamp_format = "dd/mm/yyyy hh:mm:ss")
View(hospital_events)
library(daqapo)
data("hospital_events")
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
hospital_events <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
data("hospital")
hospital <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts",
c("triagecode", "specialization"), "dd/mm/yyyy hh:mm:ss")
data("hospital_events")
hospital_events <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
hospital_events <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
library(daqapo)
hospital %>% unique_values("case_id")
hospital %>% unique_values("case_id")
hospital %>% unique_values("case_id", "activity")
ellips <- function(...) {
print(...)
}
ellips("case_id", "activity")
ellips("case_id")
ellips("case_id", "activity")
ellips <- function(...) {
print(unlist(...))
}
ellips("case_id")
ellips("case_id", "activity")
print(... %>% list
}
ellips("case_id")
ellips("case_id", "activity")
}
print(... %>% list)
ellips <- function(...) {
print(... %>% list)
}
ellips("case_id")
ellips("case_id", "activity")
ellips <- function(...) {
print(... %>% list())
}
ellips("case_id")
ellips("case_id", "activity")
ellips <- function(...) {
print(... %>% unpack())
}
ellips("case_id")
ellips <- function(...) {
params <- list(...)
print(params)
}
ellips("case_id")
ellips("case_id", "activity")
ellips <- function(...) {
params <- list(...)
print(params %>% unlist)
}
ellips("case_id")
ellips("case_id", "activity")
unique_values(hospital, "case_id")
unique_values(hospital, "case_id", "activity")
ellips <- function(...) {
params <- rlang::enquos(...)
print(params)
}
ellips("case_id")
ellips("case_id", "activity")
ellips <- function(...) {
params <- rlang::enquos(...)
print(!!! params)
}
ellips("case_id")
ellips <- function(...) {
params <- rlang::enquos(...)
unique_values(hospital, !!! params)
}
ellips("case_id")
ellips("case_id", "activity")
ellips <- function(...) {
params <- rlang::enquos(...)
unique_values(hospital, !! params)
}
ellips("case_id")
ellips <- function(...) {
params <- rlang::enquos(...)
hospital %>% distinct(!!! params)
}
ellips("case_id")
ellips("case_id", "activity")
ellips <- function(...) {
params <- rlang::enquos(...)
hospital %>% distinct(!! params)
}
ellips("case_id")
library(daqapo)
?DaQAPO
?daqapo
?DaQAPO
library(daqapo)
library(daqapo)
library(dplyr)
library(daqapo)
?`DaQAPO-package`
library(daqapo)
install.packages("swirl")
library(swirl)
install_course("")
install_course(swc_path = "../Swirl/Introduction_to_DaQAPO.swc")
swirl()
library(daqapo)
data("hospital")
str(hospital)
read_activity_log(file_name = hospital_data)
read_activity_log(file_name = "hospital_data")
daqapo::hospital
library(daqapo)
swirl()
swirl()
library(daqapo)
q()
library(swirl)
exit()
swirl::bye()
swirl()
swirl()
library(daqapo)
bye()
library(daqapo)
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
library(edeaR)
library(daqapo)
library(daqapo)
?`DaQAPO-package`
library(daqapo)
library(daqapo)
library(bubar)
library(bubaR)
library(bupaR)
patients
library(daqapo)
library(daqapo)
patients %>% events_to_activities()
library(daqapo)
patients %>% events_to_activities()
sepsis %>% events_to_activities()
library(daqapo)
sepsis %>% events_to_activities()
patients %>% events_to_activities()
library(daqapo)
patients %>% events_to_activities()
hospital %>% events_to_activities()
sepsis %>% events_to_activities()
eventlog %>%
filter(_NEW_LC != !!lifecycle_id_(eventlog)) %>%
count(!!lifecycle_id_(eventlog), _NEW_LC) -> changes
library(daqapo)
tibble(case = 1, activity = letters, timestamp = today())
library(tidyverse)
tibble(case = 1, activity = letters, timestamp = today())
tibble(case = 1, activity = letters, timestamp = now())
library(lubridate)
tibble(case = 1, activity = letters, timestamp = now())
tibble(case = 1, activity = letters, timestamp = now(), lc = sample(c("START","COMPLETED")))
tibble(case = 1, activity = letters, timestamp = now(), lc = sample(c("START","COMPLETED"), size = 26))
tibble(case = 1, activity = letters, timestamp = now(), lc = sample(c("START","COMPLETED"), size = 26, replace = T))
tibble(case = 1, activity = letters, timestamp = now(), lc = sample(c("START","COMPLETED"), size = 26, replace = T))  -> log
tibble(case = 1, activity = letters, timestamp = now(), lc = sample(c("START","COMPLETED"), size = 26, replace = T), resource = "Gert", instance = 1:n())  -> log
tibble(case = 1, activity = letters, timestamp = now(), lc = sample(c("START","COMPLETED"), size = 26, replace = T), resource = "Gert", instance = 1:26)  -> log
log
log %>% eventlog("case","activity","instance","timestamp","lc","resource")
?eventlog
log %>% eventlog("case","activity","instance","lc", "timestamp","resource")
log %>% eventlog("case","activity","instance","lc", "timestamp","resource") -> elog
standardize_lifecycle(elog)
log %>% eventlog("case","activity","instance","lc", "timestamp","resource") -> elog
library(daqapo)
standardize_lifecycle(elog)
standardize_lifecycle(elog)
library(daqapo)
standardize_lifecycle(elog)
standardize_lifecycle(elog)
standardize_lifecycle(elog)
library(daqapo)
library(daqapo)
standardize_lifecycle(elog)
library(daqapo)
standardize_lifecycle(elog)
"START" %in% c("start")
standardize_lifecycle(elog)
standardize_lifecycle(patients)
elog
elog %>% events_to_activities()
tibble(case = 1:52, activity = letters, timestamp = now(), lc = sample(c("START","COMPLETED"), size = 26, replace = T), resource = "Gert", instance = 1:26)  -> log
tibble(case = 1:52, activity = letters, timestamp = now(), lc = sample(c("START","COMPLETED"), size = 52, replace = T), resource = "Gert", instance = 1:26)  -> log
library(bupaR)
patients %>% mapping
patients %>% mapping %>% str
library(daqapo)
library(bupaR)
patients
patients %>% events_to_activities()
patients %>% events_to_activities() -> alog
case_id(alog)
lifecycle_id(alog)
mapping(alog)
