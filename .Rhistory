tibble(test) %>%
mutate(row_id = 1:n()) %>%
mutate(opened = ifelse(test %in% start_lifecycles, T, NA)) %>%
mutate(closed = ifelse(test %in% end_lifecycles, T, NA)) %>%
mutate(accumulate(opened, sum))
tibble(test) %>%
mutate(row_id = 1:n()) %>%
mutate(opened = ifelse(test %in% start_lifecycles, T, NA)) %>%
mutate(closed = ifelse(test %in% end_lifecycles, T, NA)) %>%
mutate(accumulate(opened, c))
accumulate(c("start","start"),assign_instance_id)
traceback()
accumulate(c("start","start"),assign_instance_id, .init = status)
assign_instance_id <- function(status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(open_instances[1]) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
status <- list(open_instances = c(), last_instance = 0)
accumulate(c("start","start"),assign_instance_id, .init = status)
accumulate(c("start","start","complete"),assign_instance_id, .init = status)
accumulate(c("start","start","start"),assign_instance_id, .init = status)
accumulate(c("start","start","start"),assign_instance_id)
accumulate(c("start","start","start"),assign_instance_id, .init = status)
assign_instance_id <- function(status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(status$open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(status$open_instances[1]) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
accumulate(c("start","start","start"),assign_instance_id, .init = status)
end_lifecycles = c("complete")
start_lifecycles = c("start")
status <- list(open_instances = c(), last_instance = 0)
assign_instance_id <- function(status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(status$open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(status$open_instances[1]) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
accumulate(c("start","start","start"),assign_instance_id, .init = status)
assign_instance_id <- function(status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(status$open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(status$open_instances) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
accumulate(c("start","start","start"),assign_instance_id, .init = status)
assign_instance_id <- function(status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(status$open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(status$open_instances) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
status$current_instance <- instance
return(status)
}
accumulate(c("start","start","start"),assign_instance_id, .init = status)
accumulate(c("start","start","start","complete"),assign_instance_id, .init = status)
accumulate(c("start","start","start","complete","schedule"),assign_instance_id, .init = status)
tibble(patient = 1, handling = "A",time = 1:10, registration_type = c("start",sample(c("start","complete"), size = 9, replace = T))) %>%
group_by(patient, handling) %>%
arrange(time)
tibble(patient = 1, handling = "A",time = 1:10, registration_type = c("start",sample(c("start","complete"), size = 9, replace = T))) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1])
tibble(patient = 1, handling = "A",time = 1:10, registration_type = c("start",sample(c("start","complete"), size = 9, replace = T))) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map(status, ~.x$current_instance))
tibble(patient = 1, handling = "A",time = 1:10, registration_type = c("start",sample(c("start","complete"), size = 9, replace = T))) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance))
patients %>% select(-handling_id, force_df = T) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance))
data(patients)
patients %>% select(-handling_id, force_df = T) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance))
patients %>% select(-handling_id, force_df = T) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance))
patients %>% select(-handling_id, force_df = T) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance)) %>%
select(-status)
patients %>% select(-handling_id, force_df = T) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance)) %>%
select(-status) %>%
mutate(instance = str_c(patient, handling, current_instance, sep = "-"))
patients %>% select(force_df = T)
patients %>%
as.data.frame()
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance)) %>%
select(-status) %>%
mutate(instance = str_c(patient, handling, current_instance, sep = "-")) %>%
tbl_df()
patients %>%
as.data.frame() %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance)) %>%
select(-status) %>%
mutate(instance = str_c(patient, handling, current_instance, sep = "-")) %>%
tbl_df()
sepsis
sepsis %>% lifecycle_labels()
traffic_fines
traffic_fines %>% lifecycle_id()
traffic_fines %>% lifecycles()
hospital_billing %>% lifecycles()
eventdataR::hospital
eventdataR::hospital %>% lifecycle_labels()
patients %>%
as.data.frame() %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance)) %>%
select(-status) %>%
mutate(instance = str_c(patient, handling, current_instance, sep = "-")) %>%
tbl_df()
patients %>% as.data.frame()
rm(assign_instance_id())
rm(assign_instance_id
)
patients %>% as.data.frame() %>% assign_instance_id()
patients %>% as.data.frame() %>% assign_instance_id("patient")
patients %>% as.data.frame() %>% assign_instance_id("patient", "handling")
patients %>% as.data.frame() %>% assign_instance_id("patient", "handling", "registration_type")
patients %>% as.data.frame() %>% assign_instance_id("patient", "handling", "time","registration_type")
patients %>% as.data.frame() %>% assign_instance_id("patient", "handling", "time","registration_type")
library(daqapo)
library(daqapo)
library(daqapo)
library(daqapo)
library(daqapo)
library(daqapo)
library(dadjoke)
dadjoke::groan()
library(daqapo)
library(bupaR)
patients %>% mutate(time = as.character(time))
patients %>% mutate(time = as.character(time)) %>% as.data.
patients %>% mutate(time = as.character(time)) %>% as.data.frame()
patients %>% as.data.frame()
patients %>% as.data.frame() %>% mutate(time = as.character(time))
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = dmy_hms)
dadjoke::groan()
library(daqapo)
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
library(daqapo)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = dmy_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = dmy_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = ymd_hms)
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
library(daqapo)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = dmy_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = dmy_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time))
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = dmy_hms)
library(daqapo)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = dmy_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = ymd_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = ymd)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = "time", format = ymd_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = c("time", "handling_od"), format = ymd_hms)
library(daqapo)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = c("time", "handling_od"), format = ymd_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = c("time", "handling_id"), format = ymd_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = c("time", "handling_id"), format = ymd_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = c("time", "handlin_id"), format = ymd_hms)
library(daqapo)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = c("time", "handlin_id"), format = ymd_hms)
library(daqapo)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = c("time", "handlin_id"), format = ymd_hms)
library(daqapo)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = c("time", "handlin_id"), format = ymd_hms)
library(daqapo)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = c("time", "handlin_id"), format = ymd_hms)
patients %>% as.data.frame() %>% mutate(time = as.character(time)) %>% convert_timestamps(columns = c("time", "handlin_id"), format = dmy)
?read_csv
library(daqapo)
patients %>% events_to_activitylog()
library(daqapo)
patients %>% events_to_activitylog()
library(daqapo)
patients %>% events_to_activitylog()
patients %>% events_to_activitylog()
patients %>% events_to_activitylog()
patients %>% events_to_activitylog()
library(daqapo)
patients %>% events_to_activitylog()
detect_resource_inconsistencies(patients)
nrow(detect_resource_inconsistencies(patients)) > 0
nrow(detect_resource_inconsistencies(patients))
library(daqapo)
nrow(detect_resource_inconsistencies(patients))
patients %>% events_to_activitylog()
patients %>% events_to_activitylog()
patients %>% events_to_activitylog()
patients %>% events_to_activitylog()
library(daqapo)
library(daqapo)
patients %>% events_to_activitylog()
patients %>% events_to_activitylog()
patients %>% events_to_activitylog()
library(daqapo)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations(c("Blood test", 100))
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations(c("Blood test", 100), c("Blood test","200"))
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations(c("Blood test", 100), c("Registration","200"))
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations(c("Blood test", 100), c("Blood test","200")) -> t
t
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood_test" = 100, "Registration" = 200") -> t
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood_test" = 100, "Registration" = 200)
library(daqapo)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood_test" = 100, "Registration" = 200)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood_test" = 100, "Registration" = 200)
library(daqapo)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood_test" = 100, "Registration" = 200) %>% names
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood_test" = 100, "Registration" = 200) -> t
t
paste0("(activity == '", names(t), "' & n > ", t, ")", collapse = " | ")
patients %>% group_by_case %>% activity_frequency()
library(bupaR)
patients %>% group_by_case %>% activity_frequency()
patients %>% activity_frequency(level = "case")
library(daqapo)
patients %>% events_to_activitylog()
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood_test" = 0)
?search
search
search()
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood_test" = 0)
patients %>% events_to_activitylog() %>% case_id
patients %>% events_to_activitylog() %>% activity_id
library(daqapo)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood_test" = 0)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood_test" = 0)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 1)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0, details = FALSE)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0, filter_condition = handling == "Registration")
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0, filter_condition = "handling == "Registration"")
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0, filter_condition = 'handling == "Registration"')
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0, filter_condition = 'handlig == "Registration"')
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0, filter_condition = 'handling == "Registration"')
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0, filter_condition = 'handling == "Registration"')
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0, details = FALSE)
patients %>% events_to_activitylog() %>% detect_activity_frequency_violations("Blood test" = 0, details = TRUE)
hospital_events_eventlog
hospital_events_eventlog %>% events_to_activitylog()
hospital_events_eventlog %>% fix_resource_inconsistencies()
library(tidyr)
hospital_events_eventlog %>% fix_resource_inconsistencies()
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog()
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "startsWith('originator', 'Clerk'")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "startsWith('originator', 'Clerk'")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "startsWith('originator', 'Clerk')")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "str_detect('originator', 'Clerk'")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "str_detect(originator, 'Clerk'")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "stringr::str_detect(originator, 'Clerk'")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "startsWith(originator, 'Clerk'")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "startsWith('originator', 'Clerk'")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "startsWith('originator', 'Clerk')")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "startsWith(originator, 'Clerk')")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "str_detect(originator, 'Clerk')")
startsWith()
?startsWith
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('activity=="Registration"', "startsWith(originator, 'Clerk')")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('specialization == "URG"', 'triagecode == 5')
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies('specialization == "URG"', 'triagecode == 3')
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", 'triagecode == 3')
test == 4
quo(test == 4)
rlang::quo(test == 4)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", 'triagecode == 3')
expr(test == 4)
rlang::expr(test == 4)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", 'triagecode == 3')
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", 'triagecode == 3')
library(rlang)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", 'triagecode == 3')
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", 'triagecode == 3')
enquo(test == 4)
enquo(iris == 2)
t <- test == 4
enquo(t)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", 'triagecode == 3')
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", 'triagecode == 3')
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", 'triagecode == 3')
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", 'triagecode == 3')
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", triagecode == 3)
source('~/UH - Local/R workspace/daqapo/R/detect_attribute_dependency_violations.R', echo=TRUE)
rm(detect_attribute_dependencies())
rm(detect_attribute_dependencies
)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", triagecode == 3)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization == "URG", triagecode == 3)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization = "URG", triagecode == 3)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(specialization = "URG", triagecode == 3)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization = "URG", triagecode == 3)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization == "URG", triagecode == 3)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization == "URG" & triagecode == 4, triagecode == 3)
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization == "URG" & triagecode == 4, triagecode == 3, filter_condition = activity == "Traige")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization == "URG" & triagecode == 4, triagecode == 3, filter_condition = activity == "Triage")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization == "URG" & triagecode == 4, triagecode == 3, filter_condition = activity == "Triage")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization == "URG" & triagecode == 4, triagecode == 3, filter_condition = activity != "Triage")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization == "URG" & triagecode == 4, triagecode == 3, filter_condition = activity !l= "Triage")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization == "URG" & triagecode == 4, triagecode == 3, filter_condition = activity l= "Triage")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization == "URG" & triagecode == 4, triagecode == 3, filter_condition = activity l$l= "Triage")
hospital_events_eventlog %>% fix_resource_inconsistencies() %>% events_to_activitylog() %>% detect_attribute_dependencies(antecedent = specialization == "URG" & triagecode == 4, triagecode == 3, filter_condition = activitpmy != "Triage")
