library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
str(hospital)
str(hospital_events)
hospital %>%
rename(start = start_ts,
complete = complete_ts) -> hospital
hospital %>%
convert_timestamps(c("start","complete"), format = dmy_hms) -> hospital
hospital %>%
activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
resource_id = "originator",
lifecycle_ids = c("start", "complete")) -> hospital
hospital_events
hospital_events %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
activity_instance_id = "event_matching",
timestamp = "timestamp",
resource_id = "originator",
lifecycle_id = "event_lifecycle_state") -> hospital_events
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
hospital %>%
detect_activity_frequency_violations("Registration" = 1)
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = startswith(resource, 'Clerk'))
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = gsub(resource, 'Clerk'))
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = gsub(originator, 'Clerk'))
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = startsWith(originator, 'Clerk'))
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == 'Clerk'))
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == 'Clerk')
hospital
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == "Clerk")
hospital %>%
detect_case_id_sequence_gaps()
hospital %>%
detect_conditional_activity_presence(condition = cattr_specialization == "Trau",
activity = "Clinical exam")
hospital
hospital %>%
detect_conditional_activity_presence(condition = cattr_specialization == "Trau",
activity = "Clinical exam")
hospital %>%
detect_duration_outliers(Treatment = duration_within(bound_sd = 1))
hospital %>%
detect_duration_outliers(Treatment = duration_within(lower_bound = 0, upper_bound = 15))
hospital %>%
detect_incomplete_cases(activities = c("Registration","Triage","Clinical Exam","Treatment","Treatment evaluation"))
hospital
hospital %>% activities_to_eventlog()
hospital %>% traces
hospital %>%
detect_incorrect_activity_names()
hospital %>%
detect_incorrect_activity_names(allowed_activities = c("Registration","Triage","Clinical Exam","Treatment","Treatment evaluation"))
hospital %>%
detect_incorrect_activity_names(allowed_activities = c("Registration","Triage","Clinical exam","Treatment","Treatment evaluation"))
hospital %>%
detect_incomplete_cases(activities = c("Registration","Triage","Clinical exam","Treatment","Treatment evaluation"))
hospital %>%
detect_missing_values()
hospital %>%
detect_missing_values(column = "activity")
hospital %>%
detect_missing_values(level_of_aggregation = "activity")
detect_missing_values(
activity_log = hospital,
level_of_aggregation = "column",
colname = "cattr_triagecode")
hospital %>%
detect_missing_values(
level_of_aggregation = "column",
column = "cattr_triagecode")
hospital %>%
detect_missing_values(
level_of_aggregation = "column",
column = "triagecode")
hospital %>%
detect_related_activities(antecedent = "Treatment evaluation",
consequent = "Treatment")
hospital %>%
detect_similar_labels(column_labels = "activity", max_edit_distance = 3)
hospital %>%
detect_time_anomalies()
hospital %>%
detect_unique_values(column_labels = "activity")
hospital %>%
detect_unique_values(column_labels = c("activity", "resource"))
hospital %>%
detect_unique_values(column_labels = c("activity", "originator"))
hospital %>%
detect_value_range_violations(triagecode = domain_numeric(from = 0, to = 5))
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 0)
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
error = TRUE
)
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
str(hospital)
str(hospital_events)
hospital %>%
rename(start = start_ts,
complete = complete_ts) -> hospital
hospital %>%
convert_timestamps(c("start","complete"), format = dmy_hms) -> hospital
hospital %>%
activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
resource_id = "originator",
lifecycle_ids = c("start", "complete")) -> hospital
hospital_events
hospital_events %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
activity_instance_id = "event_matching",
timestamp = "timestamp",
resource_id = "originator",
lifecycle_id = "event_lifecycle_state") -> hospital_events
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == "Clerk")
hospital
hospital %>% filter(originator == "Clerk")
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == "Clerk 1")
consequence = originator == "Clerk 1")
hospital %>% filter(originator == "Clerk 1")
hospital %>% filter(originator == "Clerk 2")
hospital %>% filter(originator == "Clerk 3")
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == "Clerk 3")
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequent = originator == "Clerk 3")
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequent = originator == "Clerk")
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequent = startsWith(originator,"Clerk"))
hospital %>%
detect_conditional_activity_presence(condition = specialization == "Trau",
activity = "Clinical exam")
hospital %>%
detect_conditional_activity_presence(condition = specialization == "Trau",
activities = "Clinical exam")
hospital
hospital %>%
detect_conditional_activity_presence(condition = specialization == "TRAU",
activities = "Clinical exam")
pander::pandoc.indent()
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
usethis::use_pkgdown()
pkgdown::build_site()
activitylog %>%
rename(ACTIVITY_CLASSIFIER := !!activity_id_(activitylog),
CASE_CLASSIFIER := !!case_id_(activitylog)) %>%
select(ACTIVITY_CLASSIFIER, CASE_CLASSIFIER, start, complete) %>%
group_by(CASE_CLASSIFIER) %>%
mutate(INSTANCE = 1:n()) %>%
mutate(INTERVAL = map2(start, complete, interval)) -> intervals
?intersect
library(lubridate)
?intersect
lubridate::intersect()
?lubridate::intersect
library(daqapo)
hospital_events_eventlog
hospital
hospital %>% activitylog("patient_visit_nr","activity","originator", c("start","complete"))
hospital %>% activitylog("patient_visit_nr","activity","originator", c("start","complete")) -> hospital_activitylog
str(hospital_activitylog)
library(daqapo)
detect_overlaps(hospital_activitylog)
detect_overlaps(hospital_activitylog)
?int_overlaps
?int_overlaps
??int_overlaps
detect_overlaps(hospital_activitylog)
library(daqapo)
library(daqapo)
detect_overlaps(hospital_activitylog)
interval(now(), now() + 100)
interval(now(), now() + 100) -> x
interval(now(), now() + 100) -> y
int_overlaps(x,y)
detect_overlaps(hospital_activitylog)
library(daqapo)
library(daqapo)
detect_overlaps(hospital_activitylog)
detect_overlaps(hospital_activitylog)
library(daqapo)
detect_overlaps(hospital_activitylog)
library(daqapo)
library(daqapo)
detect_overlaps(hospital_activitylog)
library(daqapo)
detect_overlaps(hospital_activitylog)
detect_overlaps(hospital_activitylog)
length(x)
x
as.difftime(x)
as.double(x)
as.double(x, units = "mins")
library(daqapo)
detect_overlaps(hospital_activitylog)
library(daqapo)
detect_overlaps(hospital_activitylog)
detect_overlaps(hospital_activitylog)
detect_overlaps(hospital_activitylog)
detect_overlaps(hospital_activitylog)
detect_overlaps(hospital_activitylog)
detect_overlaps(hospital_activitylog)
detect_overlaps(hospital_activitylog, level_of_aggregation = "case")
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource")
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource")
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource")
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource")
hospital_activitylog %>% filter(resource == "Nurse 17")
hospital_activitylog %>% filter(originator == "Nurse 17")
hospital_activitylog
hospital_activitylog %>% filter(originator == "Nurse 17")
hospital_activitylog %>% dplyr::filter(originator == "Nurse 17")
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource")
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource")
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource")
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource", details = F)
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource", details = F)
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource", details = T)
detect_overlaps(hospital_activitylog, level_of_aggregation = "resource")
detect_overlaps(hospital_activitylog, level_of_aggregation = "case")
detect_overlaps(hospital_activitylog, level_of_aggregation = "case", details = T)
detect_overlaps(hospital_activitylog, level_of_aggregation = "case", details = F)
bupaR::group_by_case
?group_by_case
iris
iris[[1]]
detect_activity_order_violations(hospital_activitylog)
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
hospital_activitylog %>% filter(patient_visit_nr %in% c(522,534,527,528))
hospital_activitylog %>% dplyr::filter(patient_visit_nr %in% c(522,534,527,528))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
.Last.value -> t
t %>% dplyr::filter(patient_visit_nr %in% c(522,534,527,528))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
row_number(c(1,6,4))
dplyr::row_number(c(1,6,4))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation")) %>% filter(patient_visit_nr == "518")
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation")) %>% dplyr::filter(patient_visit_nr == "518")
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation")) %>% dplyr::filter(patient_visit_nr == "518")
dense_rank(c(1,1,2))
dplyr::dense_rank(c(1,1,4))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
detect_activity_order_violations(hospital_activitylog, activity_order = c("Registration","Triage","Clinical exam", "Treatment", "Treatment evaluation"))
x <- now()
y <- now()
difftime(x,y)
difftime(y,x)
x <- c(F,F,T,F,F)
lead(x)
dplyr::lead(x)
dplyr::lag(x)
detect_multiregistration(hospital_activitylog)
detect_multiregistration(hospital_activitylog)
detect_multiregistration(hospital_activitylog)
detect_multiregistration(hospital_activitylog, threshold_in_seconds = 1)
detect_multiregistration(hospital_activitylog, threshold_in_seconds = 1)
detect_multiregistration(hospital_activitylog, threshold_in_seconds = 1)
detect_multiregistration(hospital_activitylog, threshold_in_seconds = 1)
detect_multiregistration(hospital_activitylog, threshold_in_seconds = 1)
detect_multiregistration(hospital_activitylog, threshold_in_seconds = 1)
detect_multiregistration(hospital_activitylog, threshold_in_seconds = 60)
detect_multiregistration(hospital_activitylog, threshold_in_seconds = 60, level = "case")
detect_multiregistration(hospital_activitylog, threshold_in_seconds = 60, level = "case")
detect_multiregistration(hospital_activitylog, threshold_in_seconds = 60, level = "case")
?forcats::fct_collapse
library(tinytex)
?tinytex
??tinytex
library(daqapo)
detect_inactive_periods(hospital_activitylog, type = "arrival")
library(daqapo)
detect_inactive_periods(hospital_activitylog, type = "arrival")
detect_inactive_periods(hospital_activitylog, type = "arrival", threshold = 60)
detect_inactive_periods(hospital_activitylog, type = "arrival", threshold = 60, start_activities = "Registration")
library(daqapo)
detect_inactive_periods(hospital_activitylog, type = "arrival", threshold = 60, start_activities = "Registration")
detect_inactive_periods(hospital_activitylog, type = "activities", threshold = 60, start_activities = "Registration")
library(daqapo)
detect_inactive_periods(hospital_activitylog, type = "activities", threshold = 60, start_activities = "Registration")
detect_inactive_periods(hospital_activitylog, type = "activities", threshold = 60, start_activities = "Registration")
library(daqapo)
detect_inactive_periods(hospital_activitylog, type = "activities", threshold = 60, start_activities = "Registration")
detect_inactive_periods(hospital_activitylog, type = "arrivals", threshold = 60)
tibble(country = "België") %>%
ggplot(aes(country)) +geom_bar()
library(tidyverse)
tibble(country = "België") %>%
ggplot(aes(country)) +geom_bar()
library(daqapo)
pkgdown::build_site(run_dont_rum = TRUE)
pkgdown::build_site(run_dont_run = TRUE)
library(daqapo)
load("data/hospital_actlog.RData")
save(hospital_actlog, "data/hospital_actlog.RData")
save(hospital_actlog, file = "data/hospital_actlog.RData")
load("data/hospital_actlog.RData") -> t
t
install.packages("roxygen2")
library(daqapo)
hospital_actlog %>% detect_multiregistration()
hospital_actlog %>% detect_multiregistration(threshold_in_seconds = 6)
detect_overlaps(hospital_actlog)
library(daqapo)
hospital_actlog %>% detect_multiregistration(threshold_in_seconds = 6)
class(.Last.value)
library(daqapo)
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
hospital %>%
detect_duration_outliers(Treatment = duration_within(bound_sd = 1))
hospital_actlog
hospital_actlog %>% detect_duration_outliers(Treatment = duration_within(bound_sd=1))
duration_within(bound_sd = 1)
tibble(act = "test", duration_within(bound_sd = 1))
library(daqapo)
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
hospital %>%
detect_duration_outliers(Treatment = duration_within(bound_sd = 1))
hospital_actlog %>% detect_duration_outliers(Treatment = duration_within(bound_sd = 1))
list(Treatment = list(bound_sd = 1, lower_bound = NA, upper_boud = NA))
list(Treatment = list(bound_sd = 1, lower_bound = NA, upper_boud = NA)) -> params
tibble(act = namesparams)
tibble(act = names(params)
)
tibble(act = names(params), params)
tibble(act = names(params), params) %>% mutate(params = map(params, tibble))
library(purrr)
tibble(act = names(params), params) %>% mutate(params = map(params, tibble))
tibble(act = names(params), params) %>% mutate(params = map(params, tibble)) %>% mutate(params = map(params, ~mutate(.x, names = names( `<list>`))))
tibble(act = names(params), params) %>% mutate(params = map(params, tibble)) %>% mutate(params = map(params, ~mutate(.x, names = names( .x))))
tibble(act = names(params), params) %>% mutate(params = map(params, tibble)) %>% mutate(params = map(params, ~mutate(.x, names = names( .x)))) %>% View
View(.[[2]][[1]])
View(.[[2]][[1]])
tibble(act = names(params), params) %>% mutate(params = map(params, tibble)) %>% mutate(params = map(params, ~mutate(.x, names = names( .x)))) %>% View
tibble(act = names(params), params) %>% mutate(params = map(params, tibble)) %>% mutate(params = map(params, ~mutate(.x, names = names( .x)))) %>% pull(params)
names(params)
tibble(act = names(params), params) %>%
mutate(params = map(params, tibble))
.Last.value$params
tibble(act = names(params), params) %>%
mutate(params = map(params, tibble)) %>%
mutate(params = map(params, ~mutate(.x, names = names(`<named list>`)))) %>%
unnest(params) %>%
mutate(value = as.numeric(`<named list>`)) %>%
select(act, names,  value) %>%
spread(names, value)  -> params
library(tidyverse)
tibble(act = names(params), params) %>%
mutate(params = map(params, tibble)) %>%
mutate(params = map(params, ~mutate(.x, names = names(`<named list>`)))) %>%
unnest(params) %>%
mutate(value = as.numeric(`<named list>`)) %>%
select(act, names,  value) %>%
spread(names, value)  -> params
params
library(daqapo)
library(daqapo)
library(daqapo)
patients
patients %>% activity_presence()
library(bupaR)
patients %>% activity_presence()
patients %>% activity_presence() %>% plot()
patients %>% activity_presence() %>% plot() + labs("My title")
library(ggplot2)
patients %>% activity_presence() %>% plot() + labs("My title")
patients %>% activity_presence() %>% plot() + labs(title = "My title")
library(daqapo)
library(daqapo)
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
str(hospital)
str(hospital_events)
hospital %>%
rename(start = start_ts,
complete = complete_ts) -> hospital
hospital %>%
convert_timestamps(c("start","complete"), format = dmy_hms) -> hospital
hospital %>%
activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
resource_id = "originator",
lifecycle_ids = c("start", "complete")) -> hospital
hospital %>%
activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
resource_id = "originator",
lifecycle_ids = c("start", "complete")) -> hospital
hospital_events %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
activity_instance_id = "event_matching",
timestamp = "timestamp",
resource_id = "originator",
lifecycle_id = "event_lifecycle_state") -> hospital_events
