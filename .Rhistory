status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(instance)
}
reduce(test, .f = assign_instance_id())
reduce(test, .f = assign_instance_id(), init = status)
?reduce
reduce(test, .f = assign_instance_id(), init = status)
reduce(test, .f = assign_instance_id, init = status)
reduce(test, .f = assign_instance_id, .init = status)
reduce(test, .f = assign_instance_id)
traceback()
status
assign_instance_id(status, "start")
assign_instance_id <- function( status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(open_instances[1]) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
assign_instance_id(status, "start")
reduce(test, .f = assign_instance_id)
status
assign_instance_id(status, "start")
assign_instance(assign_instance_id(status, "start"), "complete")
assign_instance_id(assign_instance_id(status, "start"), "complete")
assign_instance_id(assign_instance_id(assign_instance_id(status, "start"), "complete"), "complete")
c("start") %>% reduce(assign_instance_id)
c("start","complete") %>% reduce(assign_instance_id)
assign_instance_id <- function( status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(open_instances[1]) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
reduce(test, .f = assign_instance_id)
c("start","complete") %>% reduce(assign_instance_id)
c("start") %>% reduce(assign_instance_id)
c("start") %>% reduce(assign_instance_id, status)
assign_instance_id <- function(lifecycle, status) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(open_instances[1]) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
c("start") %>% reduce(assign_instance_id, status)
c("start") %>% reduce(assign_instance_id, .init = status)
c("start") %>% accumulate(assign_instance_id, .init = status)
c("start") %>% accumulate(assign_instance_id)
c("start","complete") %>% accumulate(assign_instance_id)
map(c(start), assign_instance_id)
map(c(start), assign_instance_id, status)
test
tibble(test)
tibble(test) %>%
mutate(row_id = 1:n()) %>%
mutate(opened = ifelse(test %in% start_lifecycles, row_id, NA))
tibble(test) %>%
mutate(row_id = 1:n()) %>%
mutate(opened = ifelse(test %in% start_lifecycles, row_id, NA)) %>%
mutate(closed = ifelse(test %in% end_lifecycles, row_id, NA))
tibble(test) %>%
mutate(row_id = 1:n()) %>%
mutate(opened = ifelse(test %in% start_lifecycles, T, NA)) %>%
mutate(closed = ifelse(test %in% end_lifecycles, T, NA))
?accumulate
accumulate(c("start",assign_instance_id()))
accumulate(c("start",assign_instance_id))
accumulate(c("start"),assign_instance_id))
accumulate(c("start"),assign_instance_id)
accumulate(c("start","start"),assign_instance_id)
tibble(test) %>%
mutate(row_id = 1:n()) %>%
mutate(opened = ifelse(test %in% start_lifecycles, T, NA)) %>%
mutate(closed = ifelse(test %in% end_lifecycles, T, NA))
tibble(test) %>%
mutate(row_id = 1:n()) %>%
mutate(opened = ifelse(test %in% start_lifecycles, T, NA)) %>%
mutate(closed = ifelse(test %in% end_lifecycles, T, NA)) %>%
mutate(accumate(opened, count))
tibble(test) %>%
mutate(row_id = 1:n()) %>%
mutate(opened = ifelse(test %in% start_lifecycles, T, NA)) %>%
mutate(closed = ifelse(test %in% end_lifecycles, T, NA)) %>%
mutate(accumulate(opened, count))
tibble(test)
tibble(test) %>%
mutate(row_id = 1:n()) %>%
mutate(opened = ifelse(test %in% start_lifecycles, T, NA)) %>%
mutate(closed = ifelse(test %in% end_lifecycles, T, NA)) %>%
mutate(accumulate(opened, sum))
tibble(test) %>%
mutate(row_id = 1:n()) %>%
mutate(opened = ifelse(test %in% start_lifecycles, T, NA)) %>%
mutate(closed = ifelse(test %in% end_lifecycles, T, NA)) %>%
mutate(accumulate(opened, c))
accumulate(c("start","start"),assign_instance_id)
traceback()
accumulate(c("start","start"),assign_instance_id, .init = status)
assign_instance_id <- function(status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(open_instances[1]) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
status <- list(open_instances = c(), last_instance = 0)
accumulate(c("start","start"),assign_instance_id, .init = status)
accumulate(c("start","start","complete"),assign_instance_id, .init = status)
accumulate(c("start","start","start"),assign_instance_id, .init = status)
accumulate(c("start","start","start"),assign_instance_id)
accumulate(c("start","start","start"),assign_instance_id, .init = status)
assign_instance_id <- function(status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(status$open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(status$open_instances[1]) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
accumulate(c("start","start","start"),assign_instance_id, .init = status)
end_lifecycles = c("complete")
start_lifecycles = c("start")
status <- list(open_instances = c(), last_instance = 0)
assign_instance_id <- function(status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(status$open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(status$open_instances[1]) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
accumulate(c("start","start","start"),assign_instance_id, .init = status)
assign_instance_id <- function(status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(status$open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(status$open_instances) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
return(status)
}
accumulate(c("start","start","start"),assign_instance_id, .init = status)
assign_instance_id <- function(status, lifecycle) {
if(lifecycle %in% start_lifecycles) {
#nieuwe gestart
if(length(status$open_instances)>0) {
# voeg nieuwe toe op basis van max open
instance <- max(status$open_instances) + 1
status$open_instances <- c(status$open_instances, instance)
status$last_instance <- instance
} else {
# voeg nieuwe toe op basis van laatste gekend
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else if(lifecycle %in% end_lifecycles) {
#eindpunt
if(length(status$open_instances)>0) {
# eindig oudste instance
instance <- status$open_instances[1]
status$open_instances <- status$open_instances[-1]
} else {
# maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
} else {
# gebruik oudste
if(length(status$open_instances)>0) {
instance <- status$open_instances[1]
} else {
# of maak nieuwe
instance <- status$last_instance + 1
status$open_instances <- instance
status$last_instance <- instance
}
}
status$current_instance <- instance
return(status)
}
accumulate(c("start","start","start"),assign_instance_id, .init = status)
accumulate(c("start","start","start","complete"),assign_instance_id, .init = status)
accumulate(c("start","start","start","complete","schedule"),assign_instance_id, .init = status)
tibble(patient = 1, handling = "A",time = 1:10, registration_type = c("start",sample(c("start","complete"), size = 9, replace = T))) %>%
group_by(patient, handling) %>%
arrange(time)
tibble(patient = 1, handling = "A",time = 1:10, registration_type = c("start",sample(c("start","complete"), size = 9, replace = T))) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1])
tibble(patient = 1, handling = "A",time = 1:10, registration_type = c("start",sample(c("start","complete"), size = 9, replace = T))) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map(status, ~.x$current_instance))
tibble(patient = 1, handling = "A",time = 1:10, registration_type = c("start",sample(c("start","complete"), size = 9, replace = T))) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance))
patients %>% select(-handling_id, force_df = T) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance))
data(patients)
patients %>% select(-handling_id, force_df = T) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance))
patients %>% select(-handling_id, force_df = T) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance))
patients %>% select(-handling_id, force_df = T) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance)) %>%
select(-status)
patients %>% select(-handling_id, force_df = T) %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance)) %>%
select(-status) %>%
mutate(instance = str_c(patient, handling, current_instance, sep = "-"))
patients %>% select(force_df = T)
patients %>%
as.data.frame()
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance)) %>%
select(-status) %>%
mutate(instance = str_c(patient, handling, current_instance, sep = "-")) %>%
tbl_df()
patients %>%
as.data.frame() %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance)) %>%
select(-status) %>%
mutate(instance = str_c(patient, handling, current_instance, sep = "-")) %>%
tbl_df()
sepsis
sepsis %>% lifecycle_labels()
traffic_fines
traffic_fines %>% lifecycle_id()
traffic_fines %>% lifecycles()
hospital_billing %>% lifecycles()
eventdataR::hospital
eventdataR::hospital %>% lifecycle_labels()
patients %>%
as.data.frame() %>%
group_by(patient, handling) %>%
arrange(time) %>%
mutate(status = accumulate(registration_type, assign_instance_id, .init = status)[-1]) %>%
mutate(current_instance = map_dbl(status, ~.x$current_instance)) %>%
select(-status) %>%
mutate(instance = str_c(patient, handling, current_instance, sep = "-")) %>%
tbl_df()
patients %>% as.data.frame()
rm(assign_instance_id())
rm(assign_instance_id
)
patients %>% as.data.frame() %>% assign_instance_id()
patients %>% as.data.frame() %>% assign_instance_id("patient")
patients %>% as.data.frame() %>% assign_instance_id("patient", "handling")
patients %>% as.data.frame() %>% assign_instance_id("patient", "handling", "registration_type")
patients %>% as.data.frame() %>% assign_instance_id("patient", "handling", "time","registration_type")
patients %>% as.data.frame() %>% assign_instance_id("patient", "handling", "time","registration_type")
