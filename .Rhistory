<<<<<<< HEAD
# Apply filter condition when specified
tryCatch({
if(!is.null(filter_condition)) {
activity_log <- activity_log %>% filter_(filter_condition)
}
}, error = function(e) {
warning.filtercondition <<- TRUE
}
)
if(warning.filtercondition) {
warning("The condition '", filter_condition, "'  is invalid. No filtering performed on the dataset.")
}
n_cases <- activity_log %>% distinct(case_id) %>% nrow()
n_cases <- NULL
n_cases <- activity_log %>% distinct(case_id) %>% nrow()
library(tidyverse)
library(daqapo)
library(tidyverse)
data("hospital")
read_activity_log(
hospital, "patient_visit_nr", "activity", "originator", "start_ts",
"complete_ts", c("triagecode", "specialization"), "dd/mm/yyyy hh:mm:ss"
) -> hospital
activity_log <- hospital
activity_order <- c("Registration", "Triage", "Clinical exam", "Treatment", "Treatment evaluation")
timestamp = "both"
details = TRUE
filter_condition = NULL
# Apply filter condition when specified
tryCatch({
if(!is.null(filter_condition)) {
activity_log <- activity_log %>% filter_(filter_condition)
}
}, error = function(e) {
warning.filtercondition <<- TRUE
}
)
if(warning.filtercondition) {
warning("The condition '", filter_condition, "'  is invalid. No filtering performed on the dataset.")
}
n_cases <- activity_log %>% distinct(case_id) %>% nrow()
# Filter activities included in activity_order
activity_log <- activity_log %>% filter(activity %in% activity_order)
View(activity_log)
# Add number to ordered activities (used for ordering when multiple activities have the same timestamp for a particular case)
activity_order <- as.data.frame(activity_order)
activity_order$nr <- seq(1, nrow(activity_order))
View(activity_order)
colnames(activity_order)[1] <- "activity"
activity_log <- merge(activity_log,activity_order, by  = "activity")
# Detect time overlap between consecutive activities in case both timestamps are used
if(timestamp == "both" & details == TRUE){
# Sort the activity log
activity_log <- activity_log %>% arrange(case_id, start,complete, nr)
# Determine whether activities are overlapping
#activity_log$start <- as.character(activity_log$start)
#activity_log$complete <- as.character(activity_log$complete)
#activity_log$prior_start <- c(NA, activity_log$start[-nrow(activity_log)])
#activity_log$prior_complete <- c(NA, activity_log$complete[-nrow(activity_log)])
#activity_log$prior_case <- c(NA, activity_log$case_id[-nrow(activity_log)])
#activity_log$prior_activity <- c(NA, activity_log$activity[-nrow(activity_log)])
#activity_log$start <- ymd_hms(activity_log$start)
#activity_log$complete <- ymd_hms(activity_log$complete)
#activity_log$prior_start <- ymd_hms(activity_log$prior_start)
#activity_log$prior_complete <- ymd_hms(activity_log$prior_complete)
activity_log <- activity_log %>%
mutate(
prior_start = lag(start),
prior_complete = lag(complete),
prior_case = lag(case_id),
prior_activity = lag(activity)
)
activity_log$time_overlap <- activity_log$case_id == activity_log$prior_case & activity_log$prior_complete > activity_log$start
activity_log$time_overlap[1] <- FALSE
activity_log$overlapping <- NA
index <- activity_log$time_overlap == TRUE
activity_log$overlapping[index] <- paste(activity_log$prior_activity[index], "and", activity_log$activity[index])
remove(index)
time_overlaps <- activity_log %>% filter(!is.na(overlapping)) %>% group_by(overlapping) %>% summarize(n = n()) %>% arrange(desc(n))
}
load("G:/My Drive/Shared files folders/DAQAPO/R Implementation/data/hospital.RData")
library(daqapo)
activity_log <- read_activity_log(hospital, patient_visit_nr, activity, originator, start_ts, complete_ts, c(triagecode, specialization))
activity_log <- read_activity_log("hospital", "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts", c("triagecode", "specialization"))
activity_log <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts", c("triagecode", "specialization"))
activity_log <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts", c("triagecode", "specialization"),timestamp_format = "dd-mm-yyyy")
activity_log <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts", c("triagecode", "specialization"),timestamp_format = "dd-mm-yyyy hh:mm:ss")
activity_order <- c("Registration", "Triage", "Treatment")
activity_log_backup <- activity_log
# Filter activities included in activity_order
activity_log <- activity_log %>% filter(activity %in% activity_order)
library(dplyr)
# Filter activities included in activity_order
activity_log <- activity_log %>% filter(activity %in% activity_order)
# Add number to ordered activities (used for ordering when multiple activities have the same timestamp for a particular case)
activity_order <- as.data.frame(activity_order)
activity_order$nr <- seq(1, nrow(activity_order))
colnames(activity_order)[1] <- "activity"
activity_log <- merge(activity_log,activity_order, by  = "activity")
# Sort the activity log
activity_log <- activity_log %>% arrange(case_id, start,complete, nr)
activity_log <- activity_log %>%
mutate(
prior_start = lag(start),
prior_complete = lag(complete),
prior_case = lag(case_id),
prior_activity = lag(activity)
)
activity_log$time_overlap <- activity_log$case_id == activity_log$prior_case & activity_log$prior_complete > activity_log$start
activity_log$time_overlap[1] <- FALSE
activity_log$overlapping <- NA
View(activity_log)
index <- activity_log$time_overlap == TRUE
activity_log$overlapping[index] <- paste(activity_log$prior_activity[index], "and", activity_log$activity[index])
remove(index)
View(activity_log)
activity_order(activity_log_backup, c("Registration", "Triage", "Treatment"))
detach("package:daqapo", unload = TRUE)
library(daqapo)
activity_order(activity_log_backup, c("Registration", "Triage", "Treatment"))
View(activity_log_backup)
activity_order(activity_log_backup, c("Registration", "Triage", "Clinical exam", "Treatment", "Treatment evaluation"))
activity_order <- c("Registration", "Triage", "Clinical exam", "Treatment", "Treatment evaluation")
activity_log <- activity_log_backup
# Filter activities included in activity_order
activity_log <- activity_log %>% filter(activity %in% activity_order)
# Add number to ordered activities (used for ordering when multiple activities have the same timestamp for a particular case)
activity_order <- as.data.frame(activity_order)
activity_order$nr <- seq(1, nrow(activity_order))
colnames(activity_order)[1] <- "activity"
activity_log <- merge(activity_log,activity_order, by  = "activity")
# Sort the activity log
activity_log <- activity_log %>% arrange(case_id, start,complete, nr)
activity_log <- activity_log %>%
mutate(
prior_start = lag(start),
prior_complete = lag(complete),
prior_case = lag(case_id),
prior_activity = lag(activity)
)
activity_log$time_overlap <- activity_log$case_id == activity_log$prior_case & activity_log$prior_complete > activity_log$start
activity_log$time_overlap[1] <- FALSE
activity_log$overlapping <- NA
View(activity_log)
index <- activity_log$time_overlap == TRUE
activity_log$overlapping[index] <- paste(activity_log$prior_activity[index], "and", activity_log$activity[index])
index <- is.na(activity_log$time_overlap)
index
activity_log$time_overlap
index <- is.na(activity_log$time_overlap)
activity_log$time_overlap[index] <- FALSE
remove(index)
activity_log$time_overlap
library(daqapo)
activity_order(activity_log_backup, c("Registration", "Triage", "Clinical exam", "Treatment", "Treatment evaluation"))
?dplyr
library(daqapo)
View(hospital)
filter_condition <- "triagecode >= 3"
hospital %>% filter_(filter_condition)
hospital %>% filter_(!!filter_condition)
hospital %>% filter(!!filter_condition)
hospital %>% filter(!! filter_condition)
?filter
hospital %>% dplyr::filter(!! filter_condition)
quo_filter_condition <- quo(filter_condition)
hospital %>% dplyr::filter(!! quo_filter_condition)
hospital %>% filter(!! quo_filter_condition)
?enquo
quo_filter_condition <- lang::enquo(filter_condition)
quo_filter_condition <- rlang::enquo(filter_condition)
hospital %>% filter(!! quo_filter_condition)
quo_filter_condition <- rlang::parse_expr((filter_condition)
quo_filter_condition <- rlang::parse_expr(filter_condition)
hospital %>% filter(!! quo_filter_condition)
hospital %>% filter(triagecode >= 3)
hospital %>% filter(!! rlang::parse_expr(filter_condition))
library(daqapo)
citation("bupar")
citation("bupaR")
library(daqapo)
data("hospital")
hospital <- read_activity_log(hospital, "patient_visit_nr", "activity", "originator", "start_ts", "complete_ts",
c("triagecode", "specialization"), "dd/mm/yyyy hh:mm:ss")
View(hospital)
=======
str_c(classes[!(classes %in% c('character','factor'))], collapse = ',')
classes[!(classes %in% c('character','factor'))]
classes[!(classes %in% c('character','factor'))] %>% unlist()
classes[!(classes %in% c('character','factor'))] %>% names()
str_c(classes[!(classes %in% c('character','factor'))] %>% names(), collapse = ',')}
str_c(classes[!(classes %in% c('character','factor'))] %>% names(), collapse = ',')
classes[classes %in% c("character","factor")] %>% names
levels(patients$employee)
patients$employee
library(daqapo)
patients_activities
patients_activities %>% detect_similar_labels(column_labels = "start")
patients_activities %>% detect_similar_labels(column_labels = "start")
library(daqapo)
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling"))
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling"))
library(daqapo)
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling"))
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling"))
library(daqapo)
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling"))
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling"))
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling", "employee"))
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling", "employee"))
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling", "employee"), show_NA = T)
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling", "employee"), show_NA = T, max_edit_distance = 10)
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling", "employee"), show_NA = T, max_edit_distance = 5)
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling", "employee"), show_NA = T, max_edit_distance = 6)
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling", "employee"), show_NA = T, max_edit_distance = 7)
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling", "employee"), show_NA = T, max_edit_distance = 8)
patients_activities
patients_activities %>% detect_similar_labels(column_labels = c("start", "handling", "employee", "patient"), show_NA = T, max_edit_distance = 3)
patients_activities %>% detect_unique_values("test")
warnings()
patients_activities %>% detect_unique_values("test")
patients_activities %>% detect_unique_values("handling")
patients_activities %>% detect_unique_values(c("handling", "employee"))
patients_activities %>% detect_unique_values(c("handling", "employee"))
patients_activities %>% detect_unique_values(c("handling", "employee"))
patients_activities %>% detect_unique_values(c("handling", "employee"))
patients_activities %>% detect_unique_values(c("handling", "employee", "start"))
patients_activities %>% detect_unique_values()
patients_activities %>% process_map()
patients %>% process_map
patients_activities %>% detect_related_activities(antecedent = "Blood test", consequent = "MRI SCAN")
patients_activities %>% detect_related_activities(antecedent = "Blood test", consequent = "MRI SCAN")
patients_activities %>% detect_related_activities(antecedent = "Blood test", consequent = "MRI SCAN")
patients_activities %>% filter_case(496)
patients_activities %>% filter_case(496) %>% process_map()
patients_activities %>% detect_missing_values()
patients_activities %>% detect_missing_values(column = "handling")
patients_activities %>% detect_missing_values(level = "col", column = "handling")
patients_activities %>% detect_missing_values(level = "act")
hospital
?read_csv
activity_log %>% args
args(activitylog)
list.files("/R")
list.files("./R")
list.files("./R") %>% View
n_cases(patients_activities)
ieventlog(patients)
detect_case_id_sequence_gaps(patients_activities)
patients
detect_case_id_sequence_gaps(patients_activities, filter_condition = handling == "Registration")
detect_duration_outliers(patients_activities, "Registration" = duration_within(), "Blood test" = duration_within(upper_bound = 10))
library(daqapo)
daqapo::activitylog
?activitylog
library(daqapo)
library(daqapo)
daqapo::convert_timestamps
library(daqapo)
library(daqapo)
patients_activities %>% detect_incorrect_activity_names()
library(daqapo)
patients_activities %>% detect_incorrect_activity_names()
?minipage
patients_activities %>% detect_incorrect_activity_names()
library(daqapo)
patients_activities %>% detect_incorrect_activity_names()
library(daqapo)
library(daqapo)
patients_activities %>% detect_incorrect_activity_names()
library(daqapo)
patients_activities %>% detect_incorrect_activity_names(allowed_activities = "Registration")
patients_activities %>% detect_incorrect_activity_names()
patients_activities %>% detect_incorrect_activity_names()
library(daqapo)
patients_activities %>% detect_incorrect_activity_names()
patients_activities %>% detect_incorrect_activity_names()
library(daqapo)
patients_activities %>% detect_incorrect_activity_names()
patients_activities %>% detect_incorrect_activity_names() -> t
t
patients_activities %>% detect_incorrect_activity_names()
patients_activities %>% detect_incorrect_activity_names()
patients_activities %>% detect_incorrect_activity_names()
patients_activities %>% detect_incorrect_activity_names()
patients_activities %>% detect_incorrect_activity_names(details = F)
patients_activities %>% detect_incorrect_activity_names(details = F)
patients_activities %>% detect_incorrect_activity_names(details = F)
patients_activities %>% detect_incorrect_activity_names(details = F, allowed_activities = "Registration")
patients_activities %>% detect_incorrect_activity_names(details = F, allowed_activities = "Registration")
library(daqapo)
patients_activities %>% detect_time_anomalies()
library(daqapo)
patients_activities %>% detect_time_anomalies()
hospital
hospital %>% convert_timestamps(c("start_ts","complete_ts"),dmy_hms)
hospital %>% convert_timestamps(c("start_ts","complete_ts"),dmy_hms) %>% activitylog(case_id = "patient_visit_nr", "activity", "originator", c("start","complete"))
library(stringr)
hospital %>% convert_timestamps(c("start_ts","complete_ts"),dmy_hms) %>% activitylog(case_id = "patient_visit_nr", "activity", "originator", c("start","complete"))
hospital %>% convert_timestamps(c("start_ts","complete_ts"),dmy_hms) %>% rename(start = start_ts, complete = complete_ts) %>% activitylog(case_id = "patient_visit_nr", "activity", "originator", c("start","complete"))
hospital %>% convert_timestamps(c("start_ts","complete_ts"),dmy_hms) %>% rename(start = start_ts, complete = complete_ts) %>% activitylog(case_id = "patient_visit_nr", "activity", "originator", c("start","complete")) %>% detect_time_anomalies()
library(daqapo)
hospital %>% convert_timestamps(c("start_ts","complete_ts"),dmy_hms) %>% rename(start = start_ts, complete = complete_ts) %>% activitylog(case_id = "patient_visit_nr", "activity", "originator", c("start","complete")) %>% detect_time_anomalies()
library(daqapo)
patients_activities %>% detect_value_range_violations("test" = domain_numeric(1,2), "test2" = domain_time("25/12/2020","26/12/2020", dmy))
library(daqapo)
patients_activities %>% detect_value_range_violations("test" = domain_numeric(1,2), "test2" = domain_time("25/12/2020","26/12/2020", dmy))
patients_activities %>% detect_value_range_violations("test" = domain_numeric(1,2), "test2" = domain_time("25/12/2020","26/12/2020", dmy)) -> t
names(t)
t$test2
t$test2$from
t$test2$from %>% class
t $ names
names(t)
t
t[[1]]
t[[1]]$type
list_along(t)
list_along(t)
rlang::list_along(t)
rep_along(t)
rlang::rep_along(t)
rlang::rep_along(t, NA)
t
t[[1]]
t
t %>% map(class)
purrr::map(t, class)
"value_range" %in% purrr::map(t, class)
"value_range" %in% purrr::map(t, ~class(.x)[1])
purrr::map(t, ~class(.x)[1])
purrr::map(t, ~class(.x)[1]) %>% unnest
purrr::map(t, ~class(.x)[1]) %>% unnest()
purrr::map(t, ~class(.x)[1]) %>% unlist()
params[[1]]
t[[1]]
names(t[[1]])
names(t)[1]
library(daqapo)
patients_activities %>% detect_value_range_violations("test" = domain_numeric(1,2), "test2" = domain_time("25/12/2020","26/12/2020", dmy))
patients_activities %>% detect_value_range_violations("test" = domain_numeric(1,2), "test2" = domain_time("25/12/2020","26/12/2020", dmy))
library(daqapo)
patients_activities %>% detect_value_range_violations("test" = domain_numeric(1,2), "test2" = domain_time("25/12/2020","26/12/2020", dmy))
library(daqapo)
patients_activities
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2017", dmy))
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2017", dmy))
library(daqapo)
library(daqapo)
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2017", dmy))
library(glue)
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2017", dmy))
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2017", dmy))
library(daqapo)
library(daqapo)
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2017", dmy))
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2017", dmy))
library(daqapo)
library(daqapo)
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2017", dmy))
patients_activities %>% mutate(handling_id = as.numeric(handling_id))
>>>>>>> 83ab7e46c3be5201c5072fef2c3d93b0bf9c5156
library(dplyr)
patients_activities %>% mutate(handling_id = as.numeric(handling_id))
patients_activities %>% mutate(handling_id = as.numeric(handling_id))  %>% detect_value_range_violations(handling_id = domain_numeric(1020, 1040))
patients_activities %>% mutate(handling_id = as.numeric(handling_id))  %>% detect_value_range_violations(handling_id = domain_numeric(1000, 1060))
library(daqapo)
patients_activities %>% mutate(handling_id = as.numeric(handling_id))  %>% detect_value_range_violations(handling_id = domain_numeric(1000, 1560))
patients_activities %>% mutate(handling_id = as.numeric(handling_id))  %>% detect_value_range_violations(handling_id = domain_numeric(1000, 2560))
patients_activities %>% mutate(handling_id = as.numeric(handling_id))  %>% detect_value_range_violations(handling_id = domain_numeric(1000, 5060))
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2017", dmy))
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2017", dmy))
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/12/2018", dmy))
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/1/2018", dmy))
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/2/2018", dmy))
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/5/2018", dmy))
patients_activities %>% detect_value_range_violations(complete = domain_time("25/12/2016","26/4/2018", dmy))
patients_activities %>% detect_value_range_violations(handling = domain_categorical(allowed = c("Blood test","Check-out")))
patients_activities %>% detect_value_range_violations(handling = domain_categorical(allowed = c("Blood test","Check-out")complete = domain_time("25/12/2016","26/4/2018", dmy)))
patients_activities %>% detect_value_range_violations(handling = domain_categorical(allowed = c("Blood test","Check-out")), complete = domain_time("25/12/2016","26/4/2018", dmy))
patients_activities %>% detect_value_range_violations(handling = domain_categorical(allowed = c("Blood test","Check-out")), complete = domain_time("25/12/2016","26/4/2018", dmy))
patients_activities %>% detect_value_range_violations(handling = domain_categorical(allowed = c("Blood test","Check-out")), complete = domain_time("25/12/2016","26/4/2018", dmy), details = F)
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
hospital_events
hospital %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = str_c(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(caseid = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
hospital %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(caseid = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
hospital %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(caseid = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
hospital %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(caseid = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
hospital %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(caseid = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
hospital %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(caseid = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
hospital %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(caseid = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
hospital %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(caseid = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
library(stringr)
hospital %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(caseid = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
hospital %>%
convert_timestamps(c("timestamp"), format = dmy_hms)
hospital_events %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(caseid = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
hospital_events %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(case_id = "patient_visit_nr", activity_id = "activity", activity_instance_id = "event_matching", timestamp = "timestamp", resource_id = "originator")
hospital_events %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
activity_instance_id = "event_matching",
timestamp = "timestamp",
resource_id = "originator",
lifecycle_id = "event_lifecycle_state")
hospital_events %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
activity_instance_id = "event_matching",
timestamp = "timestamp",
resource_id = "originator",
lifecycle_id = "event_lifecycle_state") -> hospital_events
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
error = TRUE
)
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
str(hospital)
str(hospital_events)
hospital %>%
rename(start = start_ts,
complete = complete_ts) -> hospital
hospital %>%
convert_timestamps(c("start","complete"), format = dmy_hms) -> hospital
hospital %>%
activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
resource_id = "originator",
lifecycle_ids = c("start", "complete")) -> hospital
hospital_events
hospital_events %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
activity_instance_id = "event_matching",
timestamp = "timestamp",
resource_id = "originator",
lifecycle_id = "event_lifecycle_state") -> hospital_events
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
hospital %>%
detect_activity_frequency_violations("Registration" = 1)
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = startswith(resource, 'Clerk'))
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = gsub(resource, 'Clerk'))
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = gsub(originator, 'Clerk'))
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = startsWith(originator, 'Clerk'))
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == 'Clerk'))
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == 'Clerk')
hospital
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == "Clerk")
hospital %>%
detect_case_id_sequence_gaps()
hospital %>%
detect_conditional_activity_presence(condition = cattr_specialization == "Trau",
activity = "Clinical exam")
hospital
hospital %>%
detect_conditional_activity_presence(condition = cattr_specialization == "Trau",
activity = "Clinical exam")
hospital %>%
detect_duration_outliers(Treatment = duration_within(bound_sd = 1))
hospital %>%
detect_duration_outliers(Treatment = duration_within(lower_bound = 0, upper_bound = 15))
hospital %>%
detect_incomplete_cases(activities = c("Registration","Triage","Clinical Exam","Treatment","Treatment evaluation"))
hospital
hospital %>% activities_to_eventlog()
hospital %>% traces
hospital %>%
detect_incorrect_activity_names()
hospital %>%
detect_incorrect_activity_names(allowed_activities = c("Registration","Triage","Clinical Exam","Treatment","Treatment evaluation"))
hospital %>%
detect_incorrect_activity_names(allowed_activities = c("Registration","Triage","Clinical exam","Treatment","Treatment evaluation"))
hospital %>%
detect_incomplete_cases(activities = c("Registration","Triage","Clinical exam","Treatment","Treatment evaluation"))
hospital %>%
detect_missing_values()
hospital %>%
detect_missing_values(column = "activity")
hospital %>%
detect_missing_values(level_of_aggregation = "activity")
detect_missing_values(
activity_log = hospital,
level_of_aggregation = "column",
colname = "cattr_triagecode")
hospital %>%
detect_missing_values(
level_of_aggregation = "column",
column = "cattr_triagecode")
hospital %>%
detect_missing_values(
level_of_aggregation = "column",
column = "triagecode")
hospital %>%
detect_related_activities(antecedent = "Treatment evaluation",
consequent = "Treatment")
hospital %>%
detect_similar_labels(column_labels = "activity", max_edit_distance = 3)
hospital %>%
detect_time_anomalies()
hospital %>%
detect_unique_values(column_labels = "activity")
hospital %>%
detect_unique_values(column_labels = c("activity", "resource"))
hospital %>%
detect_unique_values(column_labels = c("activity", "originator"))
hospital %>%
detect_value_range_violations(triagecode = domain_numeric(from = 0, to = 5))
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 1)
patients_activities %>% detect_activity_frequency_violations("Registration" = 1, "Blood test" = 0)
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
error = TRUE
)
library(daqapo)
library(dplyr)
data("hospital")
data("hospital_events")
str(hospital)
<<<<<<< HEAD
read_activity_log(file_name = hospital_data)
read_activity_log(file_name = "hospital_data")
daqapo::hospital
library(daqapo)
swirl()
swirl()
library(daqapo)
q()
library(swirl)
exit()
swirl::bye()
swirl()
swirl()
library(daqapo)
bye()
library(daqapo)
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
dadjoke::groan()
library(edeaR)
library(daqapo)
library(daqapo)
?`DaQAPO-package`
library(daqapo)
library(daqapo)
data("hospital_events")
library(daqapo)
library(dplyr)
read_event_log(hospital, "patient_visit_nr", "activity", "originator", "event_lifecycle_state", "timestamp", c("triagecode", "specialization"), "dd/mm/yyyy hh:mm:ss", "event_matching")
read_event_log(hospital_events, "patient_visit_nr", "activity", "originator", "event_lifecycle_state", "timestamp", c("triagecode", "specialization"), "dd/mm/yyyy hh:mm:ss", "event_matching")
read_event_log(hospital_events, "patient_visit_nr", "activity", "originator", "event_lifecycle_state", "timestamp", c("triagecode", "specialization"), "dd/mm/yyyy hh:mm:ss", "event_matching") -> data
data <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching")
data <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
data <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
View(data)
data <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
View(data)
data("hospital_events")
data <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
data <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
data <- read_event_log(data, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
View(data)
l
l
data("hospital_events")
data <- read_event_log(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
data <- resource_inconsistencies(hospital_events, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", "event_matching", detect_only = F)
REL <- read_event_log(data, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"dd/mm/yyyy hh:mm:ss", "event_matching")
RTAL <- restructure_to_activity_log(data, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"event_matching", "dd/mm/yyyy hh:mm:ss", )
RTAL <- restructure_to_activity_log(data, "patient_visit_nr", "activity", "originator",
"event_lifecycle_state", "timestamp", c("triagecode", "specialization"),
"event_matching", "dd/mm/yyyy hh:mm:ss")
View(REL)
View(RTAL)
install.packages(c("backports", "callr", "covr", "curl", "data.table", "digest", "DT", "haven", "hexbin", "hms", "htmltools", "igraph", "jomo", "knitr", "later", "odbc", "pkgbuild", "pkgconfig", "plotly", "promises", "purrr", "R6", "Rcpp", "RcppEigen", "rlang", "rmarkdown", "roxygen2", "rvest", "scales", "selectr", "shiny", "shinyAce", "slam", "stringdist", "testthat", "tidyverse", "tinytex", "xfun"))
install.packages("installr")
installr::updateR()
reticulate::repl_python()
print("hello world")
import numpy
n <- 5
class(n)
t <- 5.0
class(t)
t %>% as.integer()
library(tidyverse)
class(t)
t %>% as.integer()
5.6 %>% as.integer()
rm(n)
rm(t)
=======
str(hospital_events)
hospital %>%
rename(start = start_ts,
complete = complete_ts) -> hospital
hospital %>%
convert_timestamps(c("start","complete"), format = dmy_hms) -> hospital
hospital %>%
activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
resource_id = "originator",
lifecycle_ids = c("start", "complete")) -> hospital
hospital_events
hospital_events %>%
convert_timestamps(c("timestamp"), format = dmy_hms) %>%
mutate(event_matching = paste(patient_visit_nr, activity, event_matching)) %>%
events_to_activitylog(case_id = "patient_visit_nr",
activity_id = "activity",
activity_instance_id = "event_matching",
timestamp = "timestamp",
resource_id = "originator",
lifecycle_id = "event_lifecycle_state") -> hospital_events
hospital %>%
detect_activity_frequency_violations("Registration" = 1,
"Clinical exam" = 1)
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == "Clerk")
hospital
hospital %>% filter(originator == "Clerk")
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == "Clerk 1")
consequence = originator == "Clerk 1")
hospital %>% filter(originator == "Clerk 1")
hospital %>% filter(originator == "Clerk 2")
hospital %>% filter(originator == "Clerk 3")
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequence = originator == "Clerk 3")
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequent = originator == "Clerk 3")
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequent = originator == "Clerk")
hospital %>%
detect_attribute_dependencies(antecedent = activity == "Registration",
consequent = startsWith(originator,"Clerk"))
hospital %>%
detect_conditional_activity_presence(condition = specialization == "Trau",
activity = "Clinical exam")
hospital %>%
detect_conditional_activity_presence(condition = specialization == "Trau",
activities = "Clinical exam")
hospital
hospital %>%
detect_conditional_activity_presence(condition = specialization == "TRAU",
activities = "Clinical exam")
pander::pandoc.indent()
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
>>>>>>> 83ab7e46c3be5201c5072fef2c3d93b0bf9c5156
